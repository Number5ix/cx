#include "task.sidl"
#include <cx/thread/rwlock.h>

enum ComplexTaskRunResultEnum {
    TASK_Result_Schedule = TASK_Result_Basic_Count,     // schedule the task to run after the time specified in the TaskControl structure
    TASK_Result_Schedule_Progress,                      // schedule the task and mark it has having made progress
    TASK_Result_Defer,                                  // defer the task until it is advanced
    TASK_Result_Defer_Progress,                         // defer the task and mark it has having made progress
    TASK_Result_Complex_Count
};

enum ComplexTaskFlagsEnum {
    TASK_Cancel_Cascade = 0x01,    // If the task is cancelled, cancel all tasks it is depending on as well
};

class ComplexTaskQueue;

[methodprefix ctask] abstract class ComplexTask extends Task implements Sortable implements Hashable {
    int64 nextrun;              // next time for this task to run when scheduled
    int64 lastprogress;         // timestamp of last progress change
    weak:ComplexTaskQueue lastq;   // The last queue this task ran on before it was deferred
    [noinit] sarray:object:Task _depends; // other tasks that must complete before this task can run, do not modify directly!
    uint32 flags;               // flags to customize task behavior

    void dependOn([in] Task *dep);
    unbound bool advance();     // advance a deferred task to run as soon as possible
    unbound bool checkDeps(bool updateProgress);   // check if this task can run because all dependencies are satisfied
    override cancel;
	override reset;
    override cmp;
    override hash;
}