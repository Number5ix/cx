#include <cx/ssdtree/ssdinfo.sidl>
#include <cx/core/stvar.h>

enum SSD_INDEX_MARKER {
    SSD_ByName = -1             // Pass as index to address a child by name
};

interface SSDIteratorIf extends IteratorIf
{
    stvar *ptr();
    int32 idx();
    bool name(string *out);
}

abstract class SSDIterator implements SSDIteratorIf
{
}

interface SSDNodeIf
{
    // Gets a value. Caller owns the value and must destroy it with stDestroy!
    bool get(int32 idx, strref name, stvar *out, SSDLock *lock);

    // Gets a pointer to a value. This points to the internal storage within the node
    // so it is only guaranteed to be valid while the read lock is held.
    stvar *ptr(int32 idx, strref name, SSDLock *lock);

    // Sets the given value
    bool set(int32 idx, strref name, stvar val, SSDLock *lock);

    // Same as setValue but consumes the value
    // (consumes even on failure)
    bool setC(int32 idx, strref name, stvar *val, SSDLock *lock);

    // Removes a value
    bool remove(int32 idx, strref name, SSDLock *lock);

    // How many values / objects does this node contain?
    int32 count(SSDLock *lock);

    // IMPORTANT NOTE: Iterator interface cannot acquire the lock automatically;
    // to use this you MUST first call ssdLockRead on the node!
    SSDIterator *iter();
}

abstract class SSDNode implements SSDNodeIf implements Iterable
{
    object:SSDInfo info;

    // This node is an object that contains values or objects by name
    bool isObject();

    // This node is an array that contains values or objects by array index
    bool isArray();
}
